[{"/Users/jleemt/Desktop/dev/wx-formdata/src/index.ts":"1"},{"size":4389,"mtime":1618899418849,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"7e86ei","/Users/jleemt/Desktop/dev/wx-formdata/src/index.ts",["7","8","9","10"],"import { lookup } from \"mime-types\";\r\nimport parsePath from \"parse-filepath\";\r\n\r\ndeclare global {\r\n\tinterface String {\r\n\t\tutf8CodeAt: (i: number) => number[];\r\n\t}\r\n}\r\n\r\nexport function randomString(length = 17) {\r\n\tlet res = \"\";\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tconst n = parseInt(Math.random() * 62 + \"\", 10);\r\n\t\tif (n <= 9) {\r\n\t\t\tres += n;\r\n\t\t} else if (n <= 35) {\r\n\t\t\tres += String.fromCharCode(n + 55);\r\n\t\t} else {\r\n\t\t\tres += String.fromCharCode(n + 61);\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n}\r\n\r\nexport function formDataArray(\r\n\tboundary: string,\r\n\tname: string,\r\n\tvalue: any,\r\n\tfileName?: string\r\n): number[] {\r\n\tlet dataString = \"\";\r\n\tconst isFile = !!fileName;\r\n\r\n\tdataString += boundary + \"\\r\\n\";\r\n\tdataString += 'Content-Disposition: form-data; name=\"' + name + '\"';\r\n\r\n\tif (isFile) {\r\n\t\tdataString += '; filename=\"' + fileName + '\"' + \"\\r\\n\";\r\n\t\tdataString += \"Content-Type: \" + lookup(fileName!) + \"\\r\\n\\r\\n\";\r\n\t} else {\r\n\t\tdataString += \"\\r\\n\\r\\n\";\r\n\t\tdataString += value;\r\n\t}\r\n\r\n\tlet dataArray = [];\r\n\tfor (let i = 0; i < dataString.length; i++) {\r\n\t\t// 取出文本的charCode（10进制）\r\n\t\tdataArray.push(...dataString.utf8CodeAt(i));\r\n\t}\r\n\r\n\tif (isFile) {\r\n\t\tconst fileArray = new Uint8Array(value);\r\n\t\tdataArray = dataArray.concat(Array.prototype.slice.call(fileArray));\r\n\t}\r\n\tdataArray.push(...\"\\r\".utf8CodeAt(0));\r\n\tdataArray.push(...\"\\n\".utf8CodeAt(0));\r\n\r\n\treturn dataArray;\r\n}\r\n\r\nString.prototype.utf8CodeAt = function (i: number): number[] {\r\n\tconst out = [];\r\n\tlet p = 0;\r\n\tlet c = this.charCodeAt(i);\r\n\tif (c < 128) {\r\n\t\tout[p++] = c;\r\n\t} else if (c < 2048) {\r\n\t\tout[p++] = (c >> 6) | 192;\r\n\t\tout[p++] = (c & 63) | 128;\r\n\t} else if (\r\n\t\t(c & 0xfc00) === 0xd800 &&\r\n\t\ti + 1 < this.length &&\r\n\t\t(this.charCodeAt(i + 1) & 0xfc00) === 0xdc00\r\n\t) {\r\n\t\t// Surrogate Pair\r\n\t\tc = 0x10000 + ((c & 0x03ff) << 10) + (this.charCodeAt(++i) & 0x03ff);\r\n\t\tout[p++] = (c >> 18) | 240;\r\n\t\tout[p++] = ((c >> 12) & 63) | 128;\r\n\t\tout[p++] = ((c >> 6) & 63) | 128;\r\n\t\tout[p++] = (c & 63) | 128;\r\n\t} else {\r\n\t\tout[p++] = (c >> 12) | 224;\r\n\t\tout[p++] = ((c >> 6) & 63) | 128;\r\n\t\tout[p++] = (c & 63) | 128;\r\n\t}\r\n\treturn out;\r\n};\r\n\r\ntype File = {\r\n\tbuffer: ArrayBuffer;\r\n\tpath: string;\r\n};\r\n\r\ntype Data = {\r\n\t[key: string]: string | File;\r\n};\r\n\r\nclass FormData {\r\n\tfileManager = wx.getFileSystemManager();\r\n\tdata: Data = {};\r\n\tstatic boundary = \"----wxmpFormBoundary\";\r\n\r\n\tisBuffer(buffer: any) {\r\n\t\tif (Object.prototype.toString.call(buffer).indexOf(\"ArrayBuffer\") < 0) {\r\n\t\t\tthrow new Error(\"File cannot convert to buffer\");\r\n\t\t}\r\n\t}\r\n\tappend(name: string, value: string | ArrayBuffer, path?: string) {\r\n\t\tif (!path) {\r\n\t\t\tthis.data[name] = value as string;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst buffer = value ? value : this.fileManager.readFileSync(path);\r\n\r\n\t\tthis.isBuffer(buffer);\r\n\r\n\t\tthis.data[name] = {\r\n\t\t\tbuffer: buffer as ArrayBuffer,\r\n\t\t\tpath: parsePath(path).basename,\r\n\t\t};\r\n\t}\r\n\r\n\tget(name: string): string | File {\r\n\t\treturn this.data[name];\r\n\t}\r\n\r\n\tdelete(name: string) {\r\n\t\tdelete this.data[name];\r\n\t}\r\n\r\n\thas(name: string) {\r\n\t\treturn this.data[name] !== undefined;\r\n\t}\r\n\r\n\tappendFile(name: string, path: string) {\r\n\t\tconst buffer = this.fileManager.readFileSync(path);\r\n\t\tthis.isBuffer(buffer);\r\n\t\tthis.append(name, buffer, path);\r\n\t}\r\n\r\n\tgetData() {\r\n\t\treturn this.convert(this.data);\r\n\t}\r\n\r\n\tconvert(data: Data) {\r\n\t\tconst boundaryKey = FormData.boundary + randomString(); // 数据分割符，一般是随机的字符串\r\n\t\tconst prefix = \"--\";\r\n\t\tconst boundary = prefix + boundaryKey;\r\n\t\tconst endBoundary = boundary + prefix;\r\n\r\n\t\tlet postArray: any[] = [];\r\n\r\n\t\t// 拼接参数\r\n\t\tif (data && Object.prototype.toString.call(data) == \"[object Object]\") {\r\n\t\t\tfor (const key in data) {\r\n\t\t\t\tif ((data[key] as File).path) {\r\n\t\t\t\t\tpostArray = postArray.concat(\r\n\t\t\t\t\t\tformDataArray(boundary, key, data[key], (data[key] as File).path)\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpostArray = postArray.concat(formDataArray(boundary, key, data[key]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 结尾\r\n\t\tconst endBoundaryArray = [];\r\n\t\tfor (let i = 0; i < endBoundary.length; i++) {\r\n\t\t\t// 最后取出结束boundary的charCode\r\n\t\t\tendBoundaryArray.push(...endBoundary.utf8CodeAt(i));\r\n\t\t}\r\n\r\n\t\tpostArray = postArray.concat(endBoundaryArray);\r\n\r\n\t\treturn {\r\n\t\t\tcontentType: \"multipart/form-data; boundary=\" + boundaryKey,\r\n\t\t\tbuffer: new Uint8Array(postArray).buffer,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport default FormData;\r\n",{"ruleId":"11","severity":1,"message":"12","line":28,"column":9,"nodeType":"13","messageId":"14","endLine":28,"endColumn":12,"suggestions":"15"},{"ruleId":"16","severity":1,"message":"17","line":39,"column":43,"nodeType":"18","messageId":"19","endLine":39,"endColumn":52},{"ruleId":"11","severity":1,"message":"12","line":103,"column":19,"nodeType":"13","messageId":"14","endLine":103,"endColumn":22,"suggestions":"20"},{"ruleId":"11","severity":1,"message":"12","line":152,"column":18,"nodeType":"13","messageId":"14","endLine":152,"endColumn":21,"suggestions":"21"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["22","23"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["24","25"],["26","27"],{"messageId":"28","fix":"29","desc":"30"},{"messageId":"31","fix":"32","desc":"33"},{"messageId":"28","fix":"34","desc":"30"},{"messageId":"31","fix":"35","desc":"33"},{"messageId":"28","fix":"36","desc":"30"},{"messageId":"31","fix":"37","desc":"33"},"suggestUnknown",{"range":"38","text":"39"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"38","text":"40"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"41","text":"39"},{"range":"41","text":"40"},{"range":"42","text":"39"},{"range":"42","text":"40"},[571,574],"unknown","never",[2370,2373],[3514,3517]]